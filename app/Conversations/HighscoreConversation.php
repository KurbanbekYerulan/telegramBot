<?php

namespace App\Conversations;

use App\Models\Highscore;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Conversations\Conversation;
use BotMan\BotMan\Messages\Incoming\Answer as BotManAnswer;
use BotMan\BotMan\Messages\Outgoing\Question as BotManQuestion;

class HighscoreConversation extends Conversation
{
    /**
     * Start the conversation.
     *
     * @return mixed
     */
    public function run()
    {
        $this->showHighscore();
    }

    private function showHighscore()
    {
        $topUsers = Highscore::topUsers();

        if (!$topUsers->count()) {
            return $this->say('–†–µ–∫–æ—Ä–¥ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—É—Å—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üëç');
        }

        $topUsers->transform(function ($user) {
            return "_{$user->rank} - {$user->name}_ *{$user->points} points*";
        });

        $this->say('–í–æ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π 5 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
        $this->bot->typesAndWaits(1);
        $this->say('üèÜ –†–ï–ö–û–†–î üèÜ');
        $this->bot->typesAndWaits(1);
        $this->say($topUsers->implode("\n"), ['parse_mode' => 'Markdown']);
        $this->bot->typesAndWaits(2);
        $this->say("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–∞–∂–º–∏—Ç–µ: /quiz \n");
    }

}
