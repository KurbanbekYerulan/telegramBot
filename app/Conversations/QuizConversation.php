<?php

namespace App\Conversations;

use App\Models\Groups;
use App\Models\Answer;
use App\Models\Played;
use App\Models\Question;
use App\Models\Highscore;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Conversations\Conversation;
use BotMan\BotMan\Messages\Incoming\Answer as BotManAnswer;
use BotMan\BotMan\Messages\Outgoing\Question as BotManQuestion;
use Illuminate\Support\Facades\Log;

class QuizConversation extends Conversation
{
    /** @var Groups */
    protected $quizGroups;

    /** @var Question */
    protected $quizQuestions;

    /** @var integer */
    protected $userPoints = 0;

    /** @var integer */
    protected $userCorrectAnswers = 0;

    /** @var integer */
    protected $questionCount;

    /** @var integer */
    protected $currentQuestion = 1;


    /**
     * Start the conversation.
     *
     * @return mixed
     */
    public function run()
    {
        $this->quizGroups = Groups::all();
        $this->selectTrack();
    }

    private function selectTrack()
    {
        $this->say(
            "–£ –Ω–∞—Å –µ—Å—Ç—å " . $this->quizGroups->count() . " –≥—Ä—É–ø–ø. \n –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –æ–¥–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            ['parse_mode' => 'Markdown']
        );
        $this->bot->typesAndWaits(1);

        return $this->ask($this->chooseGroup(), function (BotManAnswer $answer) {
            $selectedTrack = Groups::where('name', $answer->getText())->first();
            if (empty($selectedTrack)) {
                $this->say('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
                return $this->selectTrack();
            }

            return $this->setTrackQuestions($selectedTrack);
        }, [
            'parse_mode' => 'Markdown'
        ]);
    }

    private function showInfo($selectedTrack = 'Laravel')
    {
        $this->say(
            "–í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ *{$this->questionCount} –≤–æ–ø—Ä–æ—Å—ã* –¥–ª—è –≥—Ä—É–ø–ø—ã {$selectedTrack}.",
            ['parse_mode' => 'Markdown']
        );
        $this->bot->typesAndWaits(1);
        $this->say('üí°üçÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –∏ –Ω–µ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —á—å–µ–π-–ª–∏–±–æ –ø–æ–º–æ—â—å—é. –í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!', [
            'parse_mode' => 'Markdown',
        ]);

        $this->bot->typesAndWaits(1);

        return $this->checkForNextQuestion();
    }

    private function checkForNextQuestion()
    {
        if ($this->quizQuestions->count()) {
            return $this->askQuestion($this->quizQuestions->first());
        }

        $this->showResult();
    }

    private function setTrackQuestions(Groups $track)
    {
        $this->quizQuestions = $track->questions->shuffle()->take(10);
        $this->questionCount = $this->quizQuestions->count();
        $this->quizQuestions = $this->quizQuestions->keyBy('id');
        return $this->showInfo($track->name);
    }

    private function askQuestion(Question $question)
    {
        $this->bot->typesAndWaits(1);
        $this->ask($this->createQuestionTemplate($question), function (BotManAnswer $answer) use ($question) {
            $isCorrect = false;
            if (strcmp($answer->getText(), 'A') == 0 || strcmp($answer->getText(), 'a') == 0) {
                $quizAnswer = Answer::where('question_id', $question->id)->get()->first();
                if (!empty($quizAnswer)) {
                    $isCorrect = true;
                }
            } elseif (strcmp($answer->getText(), 'B') == 0 || strcmp($answer->getText(), 'b') == 0) {
                $quizAnswer = Answer::where('question_id', $question->id)->orderBy('id', 'desc')->get()->first();
                if (!empty($quizAnswer)) {
                    $isCorrect = true;
                }
            }
            if (!$isCorrect) {
                $this->say("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, \n –ù–∞–ø–∏—à–∏—Ç–µ –ê –∏–ª–∏ –í (–ê –ø–µ—Ä–≤—ã–π, –í –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç).");
                return $this->checkForNextQuestion();
            }

            $this->quizQuestions->forget($question->id);

            if ($quizAnswer->correct_one) {
                $this->userPoints += $question->points;
                $this->userCorrectAnswers++;
                $answerResult = '‚úÖ';
            } else {
                $correctAnswer = $question->answers()
                    ->where('correct_one', true)
                    ->first()->text;
                $answerResult = "‚ùå _(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {$correctAnswer})_";
            }
            $this->currentQuestion++;

            $this->say("*–í–∞—à –æ—Ç–≤–µ—Ç:* {$quizAnswer->text} {$answerResult}", [
                'parse_mode' => 'Markdown'
            ]);
            $this->checkForNextQuestion();
        }, [
            'parse_mode' => 'Markdown'
        ]);
    }

    private function showResult()
    {
        Played::create([
            'chat_id' => $this->bot->getUser()->getId(),
            'points' => $this->userPoints,
        ]);
        $this->bot->typesAndWaits(1);
        $this->say('üèÅ Finished üèÅ');
        $this->bot->typesAndWaits(1);
        $this->say(
            "–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. \n –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {$this->userCorrectAnswers} / {$this->questionCount}",
            ['parse_mode' => 'Markdown']
        );
        $user = Highscore::saveUser($this->bot->getUser(), $this->userCorrectAnswers, $this->userCorrectAnswers);
        return $this->bot->startConversation(new HighscoreConversation());
    }

    private function chooseGroup()
    {
        $question = '';
        foreach ($this->quizGroups as $answer) {
            $question = $question . "\n" . $answer->name;
        }
        $questionTemplate = BotManQuestion::create("‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" . $question);

        return $questionTemplate;
    }

    private function createQuestionTemplate(Question $question)
    {
        $questions = '';
        foreach ($question->answers as $answer) {
            $questions = $questions . "\n" . $answer->text;
        }
        $questionTemplate = BotManQuestion::create("‚û°Ô∏è *–í–æ–ø—Ä–æ—Å {$this->currentQuestion} / {$this->questionCount}* \n{$question->text} \n –ù–∞–ø–∏—à–∏—Ç–µ –ê –∏–ª–∏ –í (–ê –ø–µ—Ä–≤—ã–π, –í –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç) \n" . $questions);

        return $questionTemplate;
    }
}
